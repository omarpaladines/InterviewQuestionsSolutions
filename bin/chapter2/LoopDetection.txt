Idea and Sketch of Correctness.
I divided the solution in 3 steps:

1. Detect if there is a cycle and if so, return some node in it.
2. With that node, calculate the length of the cycle.
3. With the length of the cycle, return the first node of the cycle.

For the first step, I have one pointer moving at one step at a time and a second pointer moving
at increasing distances 1,2,3... from the first pointer. This works because at some point the 
first pointer will enter the cycle. Once in the cycle, it will stay on it. The second pointer
will eventually be at a distance that is a multiple of the length of the cycle. This means
both pointers will eventually meet in a node inside the cycl (if there is one, if not then 
the method returns null as it goes till the end of the list).

Once we have a node in the cycle, we just iterate through the list starting from that node and
counting the number of nodes until we hit it again for the first time. We then have the length.

With the length of the cycle, we have two pointers with the length of the cycle as a fixed
separation between them. We then just iterate until we wraparound in the second pointer and
both pointers match. This is the start of the cycle.

Time Complexity: If there is a cycle, its length L is at most the number of nodes N. 
So the first node will be in the cycle in the first N steps for sure. So the number of hops will 
be at most (1+1) + (2+1) + (3+1) + ... + (1 + kL) = O((kL)^2) where kL is the minimum
multiple of L greater than N so O(N^2).

Space Complexity: O(1) as we are only creating two pointers.